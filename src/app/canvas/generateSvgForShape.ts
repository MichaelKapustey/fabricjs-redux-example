import { fabric } from 'fabric';

//Unfortunately fabric.js may return different svg for same object.
//The right way to handle it is to get in touch with library mantainers and
//contribute an backward compatible feature to disable such behaviour
//or create a library fork and fix it for yourself.
//But lets take an easy way here
export default function (canvasObj: fabric.Object) {

    //.toClipPathSVG returns correct transform matrix, but lacks stroke, fill and other important properties
    const clip = canvasObj.toClipPathSVG();

    //.toSVG returns all required properties, but transform matrix is unstable
    //For example, if you select one object, transform matrix is canvas related
    //If you select multiple objects, transform starts to show some weird values, 
    //Most likely in coordinate relative to center of sected objects
    let svg = canvasObj.toSVG();

    //We're going to get correct transform from .toClipPathSVG and inject it into
    //Full svg string generated by .toSVG
    const regAll = /transform=".*"/;

    //But path is somehow different, besides transform matrix it also has transform translate
    //Which is not good in .toClipPathSVG output. We will be replacing matrix only
    const regPath = /transform="matrix\(.*\) /;

    let reg = regAll;
    if (canvasObj.type === 'path') reg = regPath;

    const match = reg.exec(clip);
    if (match) {
        const correctTransform = match[0];
        svg = svg.replace(reg, correctTransform);
    }

    //This function stil didn't work, if multiple paths, or path+object are selected
    //In this case path svg contains translate in some other property
    //I decided to keep this defect.
    //Again, this should be solved through communication with library mantainers

    return { name: canvasObj.name!, svg }

}

